const { User, Session, Record } = require('../utils/associations');
const { Op } = require('sequelize');
const bot = require('../config/botInstance');
const { formatTime } = require('../helpers/formatHelper')

async function showUserStats(chatId) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        const users = await User.findAll();
        if (!users.length) {
            return bot.sendMessage(chatId, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        }

        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        let stats = [];
        for (const user of users) {
            const sessions = await Session.findAll({ where: { user_id: user.id } });
            if (!sessions.length) continue;

            const totalTests = sessions.length;

            const totalCorrectAnswers = await Record.count({
                where: { session_id: { [Op.in]: sessions.map(s => s.id) }, status: 'correct' },
            });

            const totalQuestions = await Record.count({
                where: { session_id: { [Op.in]: sessions.map(s => s.id) } },
            });

            const totalIncorrectAnswers = totalQuestions - totalCorrectAnswers;

            const totalTime = sessions.reduce((acc, session) => {
                const start = new Date(session.started_at);
                const end = session.completed_at ? new Date(session.completed_at) : new Date();
                return acc + (end - start);
            }, 0);

            const avgTimePerSession = totalTime / totalTests;

            const avgSuccessRate = totalQuestions ? (totalCorrectAnswers / totalQuestions) * 100 : 0;

            stats.push({
                user,
                totalTests,
                totalCorrectAnswers,
                totalIncorrectAnswers,
                totalTime,
                avgTimePerSession,
                avgSuccessRate,
            });
        }

        const topTotalTests = [...stats].sort((a, b) => b.totalTests - a.totalTests).slice(0, 3);
        const topSuccessRate = [...stats].sort((a, b) => b.avgSuccessRate - a.avgSuccessRate).slice(0, 3);
        const topLongestSessions = [...stats].sort((a, b) => b.totalTime - a.totalTime).slice(0, 3);

        let message = `üìä <b>–†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>\n\n`;

        // –¢–æ–ø-3 –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø—Ä–æ–π–¥–µ–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤
        message += `üèÜ <b>–¢–æ–ø-3 –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø—Ä–æ–π–¥–µ–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤</b>:\n`;
        topTotalTests.forEach((stat, index) => {
            message += `${index + 1}. ${stat.user.firstName} ${stat.user.lastName}: ${stat.totalTests} —Ç–µ—Å—Ç—ñ–≤\n`;
        });

        // –¢–æ–ø-3 –∑–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—é
        message += `\nüéØ <b>–¢–æ–ø-3 –∑–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—é</b>:\n`;
        topSuccessRate.forEach((stat, index) => {
            message += `${index + 1}. ${stat.user.firstName} ${stat.user.lastName}: ${stat.avgSuccessRate.toFixed(2)}%\n`;
        });

        // –¢–æ–ø-3 –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é —Å–µ—Å—ñ–π
        message += `\n‚è± <b>–¢–æ–ø-3 –Ω–∞–π–¥–æ–≤—à–∏—Ö —Å–µ—Å—ñ–π</b>:\n`;
        topLongestSessions.forEach((stat, index) => {
            message += `${index + 1}. ${stat.user.firstName} ${stat.user.lastName}: ${formatTime(stat.totalTime)}\n`;
        });

        // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalTests = stats.reduce((sum, stat) => sum + stat.totalTests, 0);
        const totalTime = stats.reduce((sum, stat) => sum + stat.totalTime, 0);
        const avgTime = stats.reduce((sum, stat) => sum + stat.avgTimePerSession, 0) / stats.length || 0;
        const avgSuccessRate = stats.reduce((sum, stat) => sum + stat.avgSuccessRate, 0) / stats.length || 0;

        message += `\nüìà <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n`;
        message += `- –í—Å—å–æ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç—ñ–≤: ${totalTests}\n`;
        message += `- –í—Å—å–æ–≥–æ —á–∞—Å—É –≤–∏—Ç—Ä–∞—á–µ–Ω–æ: ${formatTime(totalTime)}\n`;
        message += `- –°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–µ—Å—ñ—ó: ${formatTime(avgTime)}\n`;
        message += `- –°–µ—Ä–µ–¥–Ω—è —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${avgSuccessRate.toFixed(2)}%\n`;

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    } catch (err) {
        console.error('Error showing user stats:', err);
        await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
}

module.exports = {
    showUserStats
}