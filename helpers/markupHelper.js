const { sendMessageWithDelay } = require('../services/telegramService');
const bot = require('../config/botInstance');
const { User, Session } = require('../utils/associations');


async function showMainMenu(chatId) {
    const options = {
        reply_markup: {
            keyboard: [
                [{ text: 'üìã –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç' }, { text: 'üíå –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è' }],
                [{ text: 'üìú –ú–æ—ó –æ—Å—Ç–∞–Ω–Ω—ñ —Å–µ—Å—ñ—ó' }, { text: 'üîß –†–æ–±–æ—Ç–∞ –Ω–∞–¥ –ø–æ–º–∏–ª–∫–∞–º–∏' }],
                [{ text: 'üìÉ –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç—ñ–≤' }, { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤' }],
            ],
            resize_keyboard: true, // –†–æ–±–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–∏–º–∏
            one_time_keyboard: false, // –ö–Ω–æ–ø–∫–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –ø–æ—Å—Ç—ñ–π–Ω–æ
        },
    };
    return await sendMessageWithDelay(chatId, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å .qst —Ñ–∞–π–ª', options);
}

async function updateMainMenu(chatId) {
    try {
        const user = await User.findOne({ where: { chatId } });
        if (!user) {
            return bot.sendMessage(chatId, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è
        const activeSession = await Session.findOne({
            where: {
                user_id: user.id,
                status: 'in_progress',
            },
        });

        // –û—Å–Ω–æ–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏
        const keyboard = [
            [{ text: 'üìã –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç' }, { text: 'üíå –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è' }],
            [{ text: 'üìú –ú–æ—ó –æ—Å—Ç–∞–Ω–Ω—ñ —Å–µ—Å—ñ—ó' }, { text: 'üîß –†–æ–±–æ—Ç–∞ –Ω–∞–¥ –ø–æ–º–∏–ª–∫–∞–º–∏' }],
            [{ text: 'üìÉ –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç—ñ–≤' }, { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤' }],
        ];

        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏, —è–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è
        if (activeSession) {
            keyboard.push([
                { text: '‚è© –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ —Ç–µ—Å—Ç' },
                { text: 'üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç' },
            ]);
        }

        const options = {
            reply_markup: {
                keyboard: keyboard,
                resize_keyboard: true,
                one_time_keyboard: false,
            },
        };

        return await bot.sendMessage(chatId, '–û–Ω–æ–≤–ª–µ–Ω–æ –º–µ–Ω—é', options);
    } catch (err) {
        console.error(`Error updating main menu for chatId ${chatId}:`, err);
        await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ–Ω—é.');
    }
}

async function showTimers(chatId) {
    try {
        const timers = ['1 —Ö–≤–∏–ª–∏–Ω–∞', '2 —Ö–≤–∏–ª–∏–Ω–∏', '4 —Ö–≤–∏–ª–∏–Ω–∏', '16 —Ö–≤–∏–ª–∏–Ω'];

        const inlineKeyboard = timers.map((timer, index) => [
            { text: timer, callback_data: `timer_${2 ** index}` },
        ]);

        await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç—Ä–æ–≥–æ–≥–æ —Ä–µ–∂–∏–º—É:', {
            reply_markup: { inline_keyboard: inlineKeyboard },
        });
    } catch (err) {
        console.error(`Error showing timers for chatId ${chatId}:`, err);
        await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–∞–π–º–µ—Ä—É.');
    }
}

// inline_keyboard

module.exports = { 
    showMainMenu,
    updateMainMenu,
    showTimers
}